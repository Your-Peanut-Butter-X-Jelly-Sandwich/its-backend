[{"model": "questions.question", "pk": 1, "fields": {"question_title": "Two Sum", "question_statement": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.", "ref_program": "def twoSum(nums, target):\n        numMap = {}\n        n = len(nums)\n\n        for i in range(n):\n            complement = target - nums[i]\n            if complement in numMap:\n                return [numMap[complement], i]\n            numMap[nums[i]] = i\n\n        return []  # No solution found", "language": "python", "pub_date": "2024-03-16T12:44:23.804Z", "pub_by": 11, "due_date": "2024-05-13"}}, {"model": "questions.question", "pk": 2, "fields": {"question_title": "Longest Substring Without Repeating Characters", "question_statement": "Given a string s, find the length of the longest substring without repeating characters.", "ref_program": "def lengthOfLongestSubstring(s: str) -> int:\n    n = len(s)\n    maxLength = 0\n    charMap = {}\n    left = 0\n\n    for right in range(n):\n        if s[right] not in charMap or charMap[s[right]] < left:\n            charMap[s[right]] = right\n            maxLength = max(maxLength, right - left + 1)\n        else:\n            left = charMap[s[right]] + 1\n            charMap[s[right]] = right\n\n    return maxLength", "language": "python", "pub_date": "2024-03-16T12:45:31.519Z", "pub_by": 11, "due_date": "2024-04-06"}}, {"model": "questions.question", "pk": 3, "fields": {"question_title": "Integer to Roman", "question_statement": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven an integer, convert it to a roman numeral.", "ref_program": "\n    # Paso #1: Listas de valores romanos\n    listado_unidad = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n    listado_decena = [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"]\n    listado_centena = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"]\n    listado_millar = [\"\", \"M\", \"MM\", \"MMM\"]\n\n    # Paso #2: Obtener las unidades, decenas, centenas y millares\n    millar = num // 1000\n    centena = (num % 1000) // 100\n    decena = (num % 100) // 10\n    unidad = num % 10\n\n    # Paso #3: Convertir cada unidad a su valor romano\n    millar_romano = listado_millar[millar]\n    centena_romano = listado_centena[centena]\n    decena_romano = listado_decena[decena]\n    unidad_romano = listado_unidad[unidad]\n\n    # Paso #4: Concatenar las unidades para formar el nÂ·mero romano\n    return millar_romano + centena_romano + decena_romano + unidad_romano", "language": "python", "pub_date": "2024-03-16T12:45:39.557Z", "pub_by": 11, "due_date": "2024-04-06"}}, {"model": "questions.question", "pk": 4, "fields": {"question_title": "Permutations", "question_statement": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.", "ref_program": "def permute(nums):\n    def backtrack(start):\n        if start == len(nums):\n            permutations.append(nums[:])\n        else:\n            for i in range(start, len(nums)):\n                nums[start], nums[i] = nums[i], nums[start]\n                backtrack(start + 1)\n                nums[start], nums[i] = nums[i], nums[start]\n\n    permutations = []\n    backtrack(0)\n    return permutations", "language": "python", "pub_date": "2024-03-16T12:46:15.658Z", "pub_by": 12, "due_date": "2024-04-14"}}, {"model": "questions.question", "pk": 5, "fields": {"question_title": "Standard", "question_statement": "The standard test question", "ref_program": "def main():\n    a = 10\n    b = 0\n    for i in range(0, a):\n        b = b + 1\n    return b", "language": "python", "pub_date": "2024-03-16T12:46:26.344Z", "pub_by": 12, "due_date": "2024-04-14"}}, {"model": "questions.question", "pk": 7, "fields": {"question_title": "Reverse Integer", "question_statement": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. Assume the environment does not allow you to store 64-bit integers (signed or unsigned).", "ref_program": "def reverse(x):\n\tans = 0\n\twhile x != 0:\n\t\tans = ans * 10 + x % 10\n\t\tx //= 10\n\n\tif ans > 2**31 - 1 or ans < -(2**31):\n\t\treturn 0\n\n\treturn ans", "language": "python", "pub_date": "2024-04-09T16:52:27.243Z", "pub_by": 11, "due_date": "2024-04-27"}}, {"model": "questions.question", "pk": 8, "fields": {"question_title": "Is Odd", "question_statement": "Given a Integer, return True if it is an odd number and False otherwise", "ref_program": "def is_odd(x):\\n\\tif x % 2 == 0:\\n\\t\\treturn False\\n\\telse:\\n\\t\\treturn True", "language": "python", "pub_date": "2024-04-09T16:52:27.395Z", "pub_by": 11, "due_date": "2024-05-09"}}, {"model": "questions.testcase", "pk": 1, "fields": {"question": 1, "input": "[2,7,11,15],9", "output": "[0, 1]"}}, {"model": "questions.testcase", "pk": 2, "fields": {"question": 1, "input": "[3,2,4],6", "output": "[1, 2]"}}, {"model": "questions.testcase", "pk": 3, "fields": {"question": 1, "input": "[3,3],6", "output": "[0, 1]"}}, {"model": "questions.testcase", "pk": 4, "fields": {"question": 2, "input": "s = \"abcabcbb\"", "output": "3"}}, {"model": "questions.testcase", "pk": 5, "fields": {"question": 2, "input": "s = \"bbbbb\"", "output": "1"}}, {"model": "questions.testcase", "pk": 6, "fields": {"question": 2, "input": "s = \"pwwkew\"", "output": "3"}}, {"model": "questions.testcase", "pk": 7, "fields": {"question": 3, "input": "3", "output": "\"III\""}}, {"model": "questions.testcase", "pk": 8, "fields": {"question": 3, "input": "58", "output": "\"LVIII\""}}, {"model": "questions.testcase", "pk": 9, "fields": {"question": 3, "input": "1994", "output": "\"MCMXCIV\""}}, {"model": "questions.testcase", "pk": 10, "fields": {"question": 4, "input": "[1, 2, 3]", "output": "[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"}}, {"model": "questions.testcase", "pk": 14, "fields": {"question": 7, "input": "123", "output": "321"}}, {"model": "questions.testcase", "pk": 15, "fields": {"question": 7, "input": "-123", "output": "-321"}}, {"model": "questions.testcase", "pk": 16, "fields": {"question": 7, "input": "120", "output": "21"}}, {"model": "questions.testcase", "pk": 17, "fields": {"question": 7, "input": "9990", "output": "999"}}, {"model": "questions.testcase", "pk": 18, "fields": {"question": 8, "input": "123", "output": "True"}}, {"model": "questions.testcase", "pk": 19, "fields": {"question": 8, "input": "1", "output": "True"}}, {"model": "questions.testcase", "pk": 20, "fields": {"question": 8, "input": "120", "output": "False"}}, {"model": "questions.testcase", "pk": 21, "fields": {"question": 8, "input": "9990", "output": "False"}}]
