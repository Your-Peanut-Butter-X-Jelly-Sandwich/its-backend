{
	"info": {
		"_postman_id": "84780394-a8a9-4be9-9490-2cae2dd496d2",
		"name": "ITS-API-Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33156727"
	},
	"item": [
		{
			"name": "[01] Get access tokens",
			"item": [
				{
					"name": "[01] Get access token for student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Extract the access token from the response",
									"var accessToken = responseBody.tokens.access;",
									"",
									"// Set the extracted access token as an environment variable",
									"pm.environment.set(\"student_bearer\", accessToken);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"stu01@student.com\",\n    \"password\": \"CS3213ITS\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[02] Get access token for tutor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Extract the access token from the response",
									"var accessToken = responseBody.tokens.access;",
									"",
									"// Set the extracted access token as an environment variable",
									"pm.environment.set(\"tutor_bearer\", accessToken);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"tut11@tutor.com\",\n    \"password\": \"CS3213ITS\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[02] Add teaches relations",
			"item": [
				{
					"name": "[01] Post new relations for Tutor 11 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseMessage = [",
									"    \"Added [tutor_id=11, s_id=1]\",",
									"    \"Added [tutor_id=11, s_id=2]\",",
									"    \"Added [tutor_id=11, s_id=3]\",",
									"    \"Added [tutor_id=11, s_id=4]\"",
									"];",
									"pm.test(\"Response message is correct\", function () {",
									"    pm.expect(responseBody.message).to.eql(expectedResponseMessage);",
									"    pm.expect(responseBody).to.not.have.property(\"error\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tutor_id\": 11,\n    \"student_ids\": [1, 2, 3, 4]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/teaches",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "[02] Post new relations for Tutor 11 - Partial Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseMessage = [",
									"    \"Added [tutor_id=11, s_id=5]\"",
									"];",
									"var expectedResponseError = [",
									"    \"[tutor_id=11, s_id=1]: UNIQUE constraint failed: accounts_teaches.tutor_id, accounts_teaches.student_id\",",
									"    \"[tutor_id=11, s_id=2]: UNIQUE constraint failed: accounts_teaches.tutor_id, accounts_teaches.student_id\"",
									"];",
									"pm.test(\"Response message is correct\", function () {",
									"    pm.expect(responseBody.message).to.eql(expectedResponseMessage);",
									"    pm.expect(responseBody.error).to.eql(expectedResponseError);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tutor_id\": 11,\n    \"student_ids\": [1, 2, 5]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/teaches",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "[03] Post new relations for Tutor 12 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseMessage = [",
									"    \"Added [tutor_id=12, s_id=1]\",",
									"    \"Added [tutor_id=12, s_id=3]\",",
									"    \"Added [tutor_id=12, s_id=5]\",",
									"    \"Added [tutor_id=12, s_id=7]\"",
									"];",
									"pm.test(\"Response message is correct\", function () {",
									"    pm.expect(responseBody.message).to.eql(expectedResponseMessage);",
									"    pm.expect(responseBody).to.not.have.property(\"error\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tutor_id\": 12,\n    \"student_ids\": [1, 3, 5, 7]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/teaches",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "[04] Post as student - Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 403 FORBIDDEN",
									"pm.test(\"Status code is 403 FORBIDDEN\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"pm.test(\"Response detail is correct\", function () {",
									"    pm.expect(responseBody.detail).to.eql(\"You do not have permission to perform this action.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{student_bearer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tutor_id\": 11,\n    \"student_ids\": [1, 2, 3, 4]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/teaches",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teaches"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{tutor_bearer}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "[03] Test change password",
			"item": [
				{
					"name": "[01] Change password - wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 400 BAD REQUEST",
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"pm.test(\"Response message is correct\", function () {",
									"    pm.expect(responseBody.error).to.eql(\"Invalid old password\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{student_bearer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"old_password\": \"wrong_password\",\n    \"new_password\": \"newpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "[02] Change password - Sucess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"pm.test(\"Response message is correct\", function () {",
									"    pm.expect(responseBody.message).to.eql(\"Password updated successfully\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{student_bearer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"old_password\": \"CS3213ITS\",\n    \"new_password\": \"newpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"change-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[04] Test student retrieval",
			"item": [
				{
					"name": "[01] Get one student - Success Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseUser = {",
									"    \"email\": \"stu01@student.com\",",
									"    \"organisation\": \"\",",
									"    \"username\": \"\",",
									"    \"is_student\": true,",
									"    \"is_tutor\": false,",
									"    \"is_manager\": false",
									"};",
									"pm.test(\"Retrieved student is correct\", function () {",
									"    pm.expect(responseBody.user).to.eql(expectedResponseUser);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students?student_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							],
							"query": [
								{
									"key": "student_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[02] Get one student - Fail (is tutor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 400 BAD REQUEST",
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"pm.test(\"Retrieved response error is correct\", function () {",
									"    pm.expect(responseBody.error).to.eql(\"User with id 11 is not a student\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students?student_id=11",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							],
							"query": [
								{
									"key": "student_id",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[03] Get one student - Fail (does not exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 404 NOT FOUND",
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"pm.test(\"Retrieved response error is correct\", function () {",
									"    pm.expect(responseBody.error).to.eql(\"Student with id 20 does not exist\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students?student_id=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							],
							"query": [
								{
									"key": "student_id",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[04] Bulk get students - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseUsers = [",
									"    {",
									"        \"email\": \"stu01@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"stu02@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"stu03@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    }",
									"];",
									"pm.test(\"Retrieved students are correct\", function () {",
									"    pm.expect(responseBody.user).to.eql(expectedResponseUsers);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students?student_ids=1,2,3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							],
							"query": [
								{
									"key": "student_ids",
									"value": "1,2,3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[05] Bulk get students - Partial Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseUsers = [",
									"    {",
									"        \"email\": \"stu01@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    }",
									"];",
									"pm.test(\"Retrieved student is correct\", function () {",
									"    pm.expect(responseBody.user).to.eql(expectedResponseUsers);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students?student_ids=1,11,20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							],
							"query": [
								{
									"key": "student_ids",
									"value": "1,11,20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[06] Get students taught by Tutor 11 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseUsers = [",
									"    {",
									"        \"email\": \"stu01@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"stu02@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"stu03@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"stu04@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"stu05@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    }",
									"];",
									"pm.test(\"Retrieved students are correct\", function () {",
									"    pm.expect(responseBody.user).to.eql(expectedResponseUsers);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students?tutor_id=11",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							],
							"query": [
								{
									"key": "tutor_id",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[07] Get students NOT taught by Tutor 11 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseUsers = [",
									"    {",
									"        \"email\": \"stu06@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"stu07@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"stu08@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"stu09@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"stu10@student.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": true,",
									"        \"is_tutor\": false,",
									"        \"is_manager\": false",
									"    }",
									"];",
									"pm.test(\"Retrieved students are correct\", function () {",
									"    pm.expect(responseBody.user).to.eql(expectedResponseUsers);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students?tutor_id=11&invert=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							],
							"query": [
								{
									"key": "tutor_id",
									"value": "11"
								},
								{
									"key": "invert",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{student_bearer}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "[05] Test tutor retrieval",
			"item": [
				{
					"name": "[01] Get one tutor - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseUser = {",
									"    \"email\": \"tut11@tutor.com\",",
									"    \"organisation\": \"\",",
									"    \"username\": \"\",",
									"    \"is_student\": false,",
									"    \"is_tutor\": true,",
									"    \"is_manager\": false",
									"};",
									"pm.test(\"Retrieved tutor is correct\", function () {",
									"    pm.expect(responseBody.user).to.eql(expectedResponseUser);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tutors?tutor_id=11",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tutors"
							],
							"query": [
								{
									"key": "tutor_id",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[02] Get one tutor - Fail (is student)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 400 BAD REQUEST",
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"pm.test(\"Retrieved response error is correct\", function () {",
									"    pm.expect(responseBody.error).to.eql(\"User with id 1 is not a tutor\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tutors?tutor_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tutors"
							],
							"query": [
								{
									"key": "tutor_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[03] Get one tutor - Fail (does not exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 404 NOT FOUND",
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"pm.test(\"Retrieved response error is correct\", function () {",
									"    pm.expect(responseBody.error).to.eql(\"Tutor with id 20 does not exist\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tutors?tutor_id=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tutors"
							],
							"query": [
								{
									"key": "tutor_id",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[04] Bulk get tutors - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseUsers = [",
									"    {",
									"        \"email\": \"tut11@tutor.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": false,",
									"        \"is_tutor\": true,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"tut12@tutor.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": false,",
									"        \"is_tutor\": true,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"tut13@tutor.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": false,",
									"        \"is_tutor\": true,",
									"        \"is_manager\": false",
									"    }",
									"];",
									"pm.test(\"Retrieved tutors are correct\", function () {",
									"    pm.expect(responseBody.user).to.eql(expectedResponseUsers);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tutors?tutor_ids=11,12,13",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tutors"
							],
							"query": [
								{
									"key": "tutor_ids",
									"value": "11,12,13"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[05] Bulk get tutors - Partial Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseUsers = [",
									"    {",
									"        \"email\": \"tut11@tutor.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": false,",
									"        \"is_tutor\": true,",
									"        \"is_manager\": false",
									"    }",
									"];",
									"pm.test(\"Retrieved tutor is correct\", function () {",
									"    pm.expect(responseBody.user).to.eql(expectedResponseUsers);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tutors?tutor_ids=1,11,20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tutors"
							],
							"query": [
								{
									"key": "tutor_ids",
									"value": "1,11,20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[06] Get tutors that teach Student 1 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the status code is 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the expected message",
									"var expectedResponseUsers = [",
									"    {",
									"        \"email\": \"tut11@tutor.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": false,",
									"        \"is_tutor\": true,",
									"        \"is_manager\": false",
									"    },",
									"    {",
									"        \"email\": \"tut12@tutor.com\",",
									"        \"organisation\": \"\",",
									"        \"username\": \"\",",
									"        \"is_student\": false,",
									"        \"is_tutor\": true,",
									"        \"is_manager\": false",
									"    }",
									"];",
									"pm.test(\"Retrieved tutors are correct\", function () {",
									"    pm.expect(responseBody.user).to.eql(expectedResponseUsers);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tutors?student_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tutors"
							],
							"query": [
								{
									"key": "student_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{tutor_bearer}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		},
		{
			"key": "student_bearer",
			"value": "student_bearer",
			"type": "string"
		},
		{
			"key": "tutor_bearer",
			"value": "tutor_bearer",
			"type": "string"
		}
	]
}